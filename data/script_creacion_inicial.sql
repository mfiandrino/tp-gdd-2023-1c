--Creación de cada tabla de nuestro modelo realizado (con la sentencia IF NOT EXISTS verificamos que no estuviera ya creada la tabla)
BEGIN TRANSACTION
-- Utilizamos la base de datos GD2C2023 que contiene la tabla Maestra
USE GD1C2023
GO

--Creamos el esquema donde realizaremos la migración
CREATE SCHEMA BASE_DE_GATOS_2
GO

--ENVIO_MENSAJERIA
IF NOT EXISTS (SELECT [name] FROM sys.tables WHERE [name] = 'ENVIO_MENSAJERIA')
CREATE TABLE BASE_DE_GATOS_2.ENVIO_MENSAJERIA (
	EM_NUMERO decimal(18, 0) PRIMARY KEY,
	EM_DIR_ORIGEN nvarchar(255) not null,
	EM_DIR_DEST nvarchar(255) not null,
	EM_LOCALIDAD_ID decimal(18, 0) not null,
	EM_KILOMETROS decimal(18,2) not null,
	EM_VALOR_ASEGURADO decimal(18,2) not null,
	EM_PRECIO_ENVIO decimal(18,2) not null,
	EM_PRECIO_SEGURO decimal(18,2) not null,
	EM_PROPINA decimal(18,2) not null,
	EM_TOTAL decimal(18,2) not null,
	EM_OBSERVACION nvarchar(255) not null,
	EM_FECHA datetime not null,
	EM_FECHA_ENTREGA datetime not null,
	EM_TIEMPO_ESTIMADO decimal(18,2) not null,
	EM_CALIFICACION decimal(18, 0) not null,
	-- FKs
	EM_ESTADO decimal(18, 0) not null,
	EM_USUARIO decimal(18, 0) not null,
	EM_TIPO_PAQUETE decimal(18, 0) not null,
	EM_REPARTIDOR decimal(18, 0) not null,
	EM_MEDIO_DE_PAGO decimal(18, 0) not null
);

-- Estado envio mensajeria
IF NOT EXISTS (SELECT [name] FROM sys.tables WHERE [name] = 'ENVIO_MESTADO_ENVIO_MENSAJERIAENSAJERIA')
CREATE TABLE BASE_DE_GATOS_2.ESTADO_ENVIO_MENSAJERIA (
	ESTADO_EM_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
	ESTADO_EM_NOMBRE NVARCHAR(50) not null
);

-- Tipo paquetes
IF NOT EXISTS (SELECT [name] FROM sys.tables WHERE [name] = 'TIPO_PAQUETES')
CREATE TABLE BASE_DE_GATOS_2.TIPO_PAQUETES (
    TP_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
    TP_NOMBRE NVARCHAR(50),
    TP_ALTO_MAX DECIMAL(18,2),
    TP_ANCHO_MAX DECIMAL(18,2),
    TP_LARGO_MAX DECIMAL(18,2),
    TP_PESO_MAX DECIMAL(18,2),
    TP_TIPO_PRECIO DECIMAL(18,2)
);

-- Locales
IF NOT EXISTS (SELECT [name] FROM sys.tables WHERE [name] = 'LOCAL_TIPOS')
CREATE TABLE BASE_DE_GATOS_2.LOCAL_TIPOS (
	LOCAL_TIPO_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
	LOCAL_TIPO_NOMBRE NVARCHAR(50)
);

IF NOT EXISTS (SELECT [name] FROM sys.tables WHERE [name] = 'LOCAL_CATEGORIAS')
CREATE TABLE BASE_DE_GATOS_2.LOCAL_CATEGORIAS (
	LOCAL_CATEGORIA_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
	LOCAL_CATEGORIA_NOMBRE NVARCHAR(50),
	LOCAL_TIPO_ID DECIMAL(18, 0)
);

IF NOT EXISTS (SELECT [name] FROM sys.tables WHERE [name] = 'LOCALES')
CREATE TABLE BASE_DE_GATOS_2.LOCALES (
	LOCAL_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
	LOCAL_NOMBRE NVARCHAR(100),
	LOCAL_DESCRIPCION NVARCHAR(255),
	LOCAL_DIRECCION_ID DECIMAL(18, 0),
	LOCAL_CATEGORIA_ID DECIMAL(18, 0)
);

IF NOT EXISTS (SELECT [name] FROM sys.tables WHERE [name] = 'LOCAL_PRODUCTO')
CREATE TABLE BASE_DE_GATOS_2.LOCAL_PRODUCTO (
	LP_LOCAL_ID DECIMAL(18, 0),
	LP_PRODUCTO_ID DECIMAL(18, 0),
	LP_PRODUCTO_PRECIO DECIMAL(18,2),
	PRIMARY KEY(LP_LOCAL_ID, LP_PRODUCTO_ID)
);

IF NOT EXISTS (SELECT [name] FROM sys.tables WHERE [name] = 'LOCAL_PRODUCTO_PEDIDO')
CREATE TABLE BASE_DE_GATOS_2.LOCAL_PRODUCTO_PEDIDO (
	LPC_LP_LOCAL_ID DECIMAL(18, 0),
	LPC_LP_PRODUCTO_ID DECIMAL(18, 0),
	LPC_PEDIDO_ID DECIMAL(18, 0),
	LPC_PRODUCTO_CANTIDAD DECIMAL(18, 0),
	LPC_PRODUCTO_PRECIO DECIMAL(18,2),
	PRIMARY KEY(LPC_LP_LOCAL_ID, LPC_LP_PRODUCTO_ID, LPC_PEDIDO_ID)
);

-- Productos
IF NOT EXISTS (SELECT [name] FROM sys.tables WHERE [name] = 'PRODUCTOS')
CREATE TABLE BASE_DE_GATOS_2.PRODUCTOS (
	PRODUCTO_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
	PRODUCTO_CODIGO NVARCHAR(50),
	PRODUCTO_NOMBRE NVARCHAR(50),
	PRODUCTO_DESCRIPCION NVARCHAR(255)
);

-- Horarios
IF NOT EXISTS (SELECT [name] FROM sys.tables WHERE [name] = 'HORARIO_DIAS')
CREATE TABLE BASE_DE_GATOS_2.HORARIO_DIAS (
	HORARIO_DIA_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
	HORARIO_LOCAL_DIA NVARCHAR(50)
);

IF NOT EXISTS (SELECT [name] FROM sys.tables WHERE [name] = 'HORARIOS')
CREATE TABLE BASE_DE_GATOS_2.HORARIOS (
	HORARIO_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
	HORARIO_DIA_ID DECIMAL(18, 0),
	HORARIO_LOCAL_HORA_APERTURA DECIMAL(18, 0),
	HORARIO_LOCAL_HORA_CIERRE DECIMAL(18, 0),
	LOCAL_ID DECIMAL(18, 0)
);

-- Localidades
IF NOT EXISTS (SELECT [name] FROM sys.tables WHERE [name] = 'LOCALIDADES')
CREATE TABLE BASE_DE_GATOS_2.LOCALIDADES (
	LOCALIDAD_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
	LOCALIDAD_NOMBRE NVARCHAR(255),
	LOCALIDAD_PROVINCIA_ID DECIMAL(18, 0)
);

-- Dirección
IF NOT EXISTS (SELECT [name] FROM sys.tables WHERE [name] = 'DIRECCION')
CREATE TABLE BASE_DE_GATOS_2.DIRECCION (
	DIRECCION_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
	DIRECCION_DIRECCION NVARCHAR(255),
	LOCALIDAD_ID DECIMAL(18, 0)
);

-- Provincias
IF NOT EXISTS (SELECT [name] FROM sys.tables WHERE [name] = 'PROVINCIAS')
CREATE TABLE BASE_DE_GATOS_2.PROVINCIAS (
    PROVINCIA_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
    PROVINCIA_NOMBRE NVARCHAR(255)
);

-- Repartidores
IF NOT EXISTS (SELECT [name] FROM sys.tables WHERE [name] = 'REPARTIDORES')
CREATE TABLE BASE_DE_GATOS_2.REPARTIDORES (
    REPARTIDOR_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
    REPARTIDOR_NOMBRE NVARCHAR(255),
    REPARTIDOR_APELLIDO NVARCHAR(255),
    REPARTIDOR_DNI DECIMAL(18, 0),
    REPARTIDOR_TELEFONO DECIMAL(18, 0),
    REPARTIDOR_DIRECION NVARCHAR(255),
    REPARTIDOR_EMAIL NVARCHAR(255),
    REPARTIDOR_FECHA_NAC DATE,
    REPARTIDOR_LOCALIDAD_ACTIVA DECIMAL(18, 0),
    REPARTIDOR_TIPO_MOVILIDAD DECIMAL(18, 0)
);

-- Movilidad
IF NOT EXISTS (SELECT [name] FROM sys.tables WHERE [name] = 'MOVILIDAD')
CREATE TABLE BASE_DE_GATOS_2.MOVILIDAD (
    MOVILIDAD_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
    MOVILIDAD_TIPO NVARCHAR(50)
);

-- Pedidos
IF NOT EXISTS (SELECT [name] FROM sys.tables WHERE [name] = 'PEDIDOS')
CREATE TABLE BASE_DE_GATOS_2.PEDIDOS (
	PEDIDO_NUMERO decimal(18, 0) PRIMARY KEY,
	PEDIDO_TOTAL_PRODUCTOS decimal(18,2) not null,
	PEDIDO_TARIFA_SERVICIO decimal(18,2) not null,
	PEDIDO_TOTAL_CUPONES decimal(18,2) not null,
	PEDIDO_TOTAL_SERVICIO decimal(18,2) not null,
	PEDIDO_OBSERV nvarchar(255) not null,
	PEDIDO_FECHA_ENTREGA datetime not null,
	PEDIDO_FECHA datetime not null,
	PEDIDO_TIEMPO_ESTIMADO_ENTREGA decimal(18,2) not null,
	PEDIDO_CALIFICACION decimal(18, 0) not null,
  -- FKs
	PEDIDO_ESTADO decimal(18, 0) not null,
	PEDIDO_USUARIO decimal(18, 0) not null,
	PEDIDO_LOCAL decimal(18, 0) not null,
	PEDIDO_MEDIO_PAGO decimal(18, 0) not null,
	PEDIDO_ENVIO_PEDIDO_ID decimal(18, 0) not null
);

-- Envío pedido
IF NOT EXISTS (SELECT [name] FROM sys.tables WHERE [name] = 'ENVIO_PEDIDO')
CREATE TABLE BASE_DE_GATOS_2.ENVIO_PEDIDO (
    EP_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
    EP_PRECIO DECIMAL(18,2),
    EP_PROPINA DECIMAL(18,2),
    EP_REPARTIDOR DECIMAL(18, 0),
    EP_DIRECCION DECIMAL(18, 0)
);

-- Estado pedido
IF NOT EXISTS (SELECT [name] FROM sys.tables WHERE [name] = 'ESTADO_PEDIDO')
CREATE TABLE BASE_DE_GATOS_2.ESTADO_PEDIDO (
    ESTADO_PEDIDO_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
    ESTADO_PEDIDO_NOMBRE NVARCHAR(50)
);

-- Medios de pago
IF NOT EXISTS (SELECT [name] FROM sys.tables WHERE [name] = 'MEDIOS_DE_PAGO')
CREATE TABLE BASE_DE_GATOS_2.MEDIOS_DE_PAGO (
    MP_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
    MP_NUMERO_TARJETA NVARCHAR(50),
    MP_TIPO DECIMAL(18, 0),
    MP_MARCA_TARJETA DECIMAL(18, 0),
    MP_USUARIO DECIMAL(18, 0)
);

IF NOT EXISTS (SELECT [name] FROM sys.tables WHERE [name] = 'TIPO_MEDIO_DE_PAGO')
CREATE TABLE BASE_DE_GATOS_2.TIPO_MEDIO_DE_PAGO (
    TIPO_MEDIO_PAGO_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
    TMP_TIPO NVARCHAR(50)
);

IF NOT EXISTS (SELECT [name] FROM sys.tables WHERE [name] = 'MARCAS_TARJETA')
CREATE TABLE BASE_DE_GATOS_2.MARCAS_TARJETA (
    MARCA_TARJETA_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
    MARCA_TARJETA_NOMBRE NVARCHAR(100)
);

-- Reclamos
IF NOT EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'RECLAMOS')
CREATE TABLE BASE_DE_GATOS_2.RECLAMOS (
  RECLAMO_NUMERO DECIMAL(18, 0) PRIMARY KEY,
  RECLAMO_FECHA datetime not null,
  RECLAMO_DESCRIPCION nvarchar(255) not null,
  RECLAMO_FECHA_SOLUCION datetime not null,
  RECLAMO_CALIFICACION decimal(18, 0) not null,
  -- FKs
  RECLAMO_SOLUCION decimal(18, 0) not null,
  RECLAMO_TIPO decimal(18, 0) not null,
  RECLAMO_ESTADO decimal(18, 0) not null,
  RECLAMO_USUARIO decimal(18, 0) not null,
  RECLAMO_PEDIDO decimal(18, 0) not null,
  RECLAMO_OPERADOR decimal(18, 0) not null,
);

-- Solución reclamo
IF NOT EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'SOLUCION_RECLAMO')
CREATE TABLE BASE_DE_GATOS_2.SOLUCION_RECLAMO (
    SOLUCION_RECLAMO_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
    SOLUCION_RECLAMO_SOLUCION NVARCHAR(50)
);

-- Tipo reclamo
IF NOT EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'TIPO_RECLAMO')
CREATE TABLE BASE_DE_GATOS_2.TIPO_RECLAMO (
    TIPO_RECLAMO_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
    TIPO_RECLAMO_TIPO NVARCHAR(50)
);

-- Estado reclamo
IF NOT EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'ESTADO_RECLAMO')
CREATE TABLE BASE_DE_GATOS_2.ESTADO_RECLAMO (
    ESTADO_RECLAMO_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
    ESTADO_RECLAMO_ESTADO NVARCHAR(50)
);

-- Operadores
IF NOT EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'OPERADORES')
CREATE TABLE BASE_DE_GATOS_2.OPERADORES (
    OPERADOR_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
    OPERADOR_NOMBRE NVARCHAR(255),
    OPERADOR_APELLIDO NVARCHAR(255),
    OPERADOR_DNI DECIMAL(18, 0),
    OPERADOR_TELEFONO DECIMAL(18, 0),
    OPERADOR_DIRECCION NVARCHAR(255),
    OPERADOR_MAIL NVARCHAR(255),
    OPERADOR_FECHA_NAC DATE
);

-- Usuarios
IF NOT EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'USUARIOS')
CREATE TABLE BASE_DE_GATOS_2.USUARIOS (
    USUARIO_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
    USUARIO_NOMBRE NVARCHAR(255),
    USUARIO_APELLIDO NVARCHAR(255),
    USUARIO_DNI DECIMAL(18, 0),
    USUARIO_FECHA_REGISTRO DATETIME2(3),
    USUARIO_TELEFONO DECIMAL(18, 0),
    USUARIO_MAIL NVARCHAR(255),
    USUARIO_FECHA_NAC DATE,
);

-- Dirección usuario
IF NOT EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'DIRECCION_USUARIO')
CREATE TABLE BASE_DE_GATOS_2.DIRECCION_USUARIO (
    DU_USUARIO_ID DECIMAL(18, 0),
    DU_DIRECCION_ID DECIMAL(18, 0),
    DU_DIRECCION_NOMBRE NVARCHAR(50),
    PRIMARY KEY (DU_USUARIO_ID, DU_DIRECCION_ID)
);

-- Cupones
IF NOT EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'CUPONES')
CREATE TABLE BASE_DE_GATOS_2.CUPONES (
    CUPON_NUMERO DECIMAL(18, 0) PRIMARY KEY,
    CUPON_MONTO DECIMAL(18, 2),
    CUPON_FECHA_ALTA DATETIME,
    CUPON_FECHA_VENCIMIENTO DATETIME,
    USUARIO_ID DECIMAL(18, 0)
);

IF NOT EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'PEDIDO_CUPON')
CREATE TABLE BASE_DE_GATOS_2.PEDIDO_CUPON (
    PEDIDO_NUMERO DECIMAL(18, 0),
    CUPON_NUMERO DECIMAL(18, 0),
		PEDIDO_CUPON_TIPO_ID DECIMAL(18, 0),
    PRIMARY KEY (PEDIDO_NUMERO, CUPON_NUMERO)
);

IF NOT EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'RECLAMO_CUPON')
CREATE TABLE BASE_DE_GATOS_2.RECLAMO_CUPON (
    CUPON_NUMERO DECIMAL(18, 0),
    RECLAMO_NUMERO DECIMAL(18, 0),
		RECLAMO_CUPON_TIPO_ID DECIMAL(18, 0),
    PRIMARY KEY (CUPON_NUMERO, RECLAMO_NUMERO)
);

IF NOT EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'RECLAMO_CUPON_TIPO')
CREATE TABLE BASE_DE_GATOS_2.RECLAMO_CUPON_TIPO (
    RECLAMO_CUPON_TIPO_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
    RECLAMO_CUPON_TIPO NVARCHAR(50)
);

IF NOT EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'PEDIDO_CUPON_TIPO')
CREATE TABLE BASE_DE_GATOS_2.PEDIDO_CUPON_TIPO(
    PEDIDO_CUPON_TIPO_ID DECIMAL(18, 0) IDENTITY PRIMARY KEY,
   	PEDIDO_CUPON_TIPO_NOMBRE NVARCHAR(50)
);

ALTER TABLE BASE_DE_GATOS_2.RECLAMO_CUPON
ADD CONSTRAINT FK_RECLAMO_CUPON_TIPO FOREIGN KEY (RECLAMO_CUPON_TIPO_ID) REFERENCES BASE_DE_GATOS_2.RECLAMO_CUPON_TIPO(RECLAMO_CUPON_TIPO_ID),
CONSTRAINT FK_RECLAMO_CUPON_CUPON FOREIGN KEY (CUPON_NUMERO) REFERENCES BASE_DE_GATOS_2.CUPONES(CUPON_NUMERO),
CONSTRAINT FK_RECLAMO_CUPON_RECLAMO FOREIGN KEY (RECLAMO_NUMERO) REFERENCES BASE_DE_GATOS_2.RECLAMOS(RECLAMO_NUMERO);

ALTER TABLE BASE_DE_GATOS_2.PEDIDO_CUPON
ADD CONSTRAINT FK_PEDIDO_CUPON_PEDIDO FOREIGN KEY (PEDIDO_NUMERO) REFERENCES BASE_DE_GATOS_2.PEDIDOS(PEDIDO_NUMERO),
CONSTRAINT FK_PEDIDO_CUPON_CUPON FOREIGN KEY (CUPON_NUMERO) REFERENCES BASE_DE_GATOS_2.CUPONES(CUPON_NUMERO),
CONSTRAINT FK_PEDIDO_CUPON_CUPON_TIPO FOREIGN KEY (PEDIDO_CUPON_TIPO_ID) REFERENCES BASE_DE_GATOS_2.PEDIDO_CUPON_TIPO(PEDIDO_CUPON_TIPO_ID);

ALTER TABLE BASE_DE_GATOS_2.CUPONES
ADD CONSTRAINT FK_USUARIO_CUPONES FOREIGN KEY (USUARIO_ID) REFERENCES BASE_DE_GATOS_2.USUARIOS(USUARIO_ID);

ALTER TABLE BASE_DE_GATOS_2.LOCALES
ADD CONSTRAINT FK_LOCAL_CATEGORIA_LOCALES FOREIGN KEY (LOCAL_CATEGORIA_ID) REFERENCES BASE_DE_GATOS_2.LOCAL_CATEGORIAS(LOCAL_CATEGORIA_ID),
CONSTRAINT FK_LOCAL_DIRECCION_LOCALES FOREIGN KEY (LOCAL_DIRECCION_ID) REFERENCES BASE_DE_GATOS_2.DIRECCION(DIRECCION_ID);

ALTER TABLE BASE_DE_GATOS_2.LOCAL_CATEGORIAS 
ADD CONSTRAINT FK_LOCAL_TIPO_LOCAL_CATEGORIAS FOREIGN KEY (LOCAL_TIPO_ID) REFERENCES BASE_DE_GATOS_2.LOCAL_TIPOS(LOCAL_TIPO_ID);

ALTER TABLE BASE_DE_GATOS_2.LOCAL_PRODUCTO 
ADD CONSTRAINT FK_LP_LOCAL_LOCAL_PRODUCTO FOREIGN KEY (LP_LOCAL_ID) REFERENCES BASE_DE_GATOS_2.LOCALES(LOCAL_ID),
CONSTRAINT FK_LP_PRODUCTO_LOCAL_PRODUCTO FOREIGN KEY (LP_PRODUCTO_ID) REFERENCES BASE_DE_GATOS_2.PRODUCTOS(PRODUCTO_ID);

ALTER TABLE BASE_DE_GATOS_2.LOCAL_PRODUCTO_PEDIDO 
ADD CONSTRAINT FK_LPC_LOCAL_PRODUCTO_LOCAL_PRODUCTO_PEDIDO FOREIGN KEY (LPC_LP_LOCAL_ID, LPC_LP_PRODUCTO_ID) REFERENCES BASE_DE_GATOS_2.LOCAL_PRODUCTO(LP_LOCAL_ID, LP_PRODUCTO_ID),
CONSTRAINT FK_LPC_PEDIDO_LOCAL_PRODUCTO_PEDIDO FOREIGN KEY (LPC_PEDIDO_ID) REFERENCES BASE_DE_GATOS_2.PEDIDOS(PEDIDO_NUMERO);

ALTER TABLE BASE_DE_GATOS_2.HORARIOS
ADD CONSTRAINT FK_HORARIO_DIA_HORARIOS FOREIGN KEY (HORARIO_DIA_ID) REFERENCES BASE_DE_GATOS_2.HORARIO_DIAS(HORARIO_DIA_ID),
CONSTRAINT FK_LOCAL_HORARIOS FOREIGN KEY (LOCAL_ID) REFERENCES BASE_DE_GATOS_2.LOCALES(LOCAL_ID);

ALTER TABLE BASE_DE_GATOS_2.LOCALIDADES
ADD CONSTRAINT FK_LOCALIDAD_PROVINCIA_LOCALIDADES FOREIGN KEY (LOCALIDAD_PROVINCIA_ID) REFERENCES BASE_DE_GATOS_2.PROVINCIAS(PROVINCIA_ID);

ALTER TABLE BASE_DE_GATOS_2.DIRECCION
ADD CONSTRAINT FK_LOCALIDAD_DIRECCION FOREIGN KEY (LOCALIDAD_ID) REFERENCES BASE_DE_GATOS_2.LOCALIDADES(LOCALIDAD_ID);

ALTER TABLE BASE_DE_GATOS_2.REPARTIDORES
ADD CONSTRAINT FK_REPARTIDOR_LOCALIDAD_ACTIVA_REPARTIDORES FOREIGN KEY (REPARTIDOR_LOCALIDAD_ACTIVA) REFERENCES BASE_DE_GATOS_2.LOCALIDADES(LOCALIDAD_ID),
CONSTRAINT FK_REPARTIDOR_TIPO_MOVILIDAD_REPARTIDORES FOREIGN KEY (REPARTIDOR_TIPO_MOVILIDAD) REFERENCES BASE_DE_GATOS_2.MOVILIDAD(MOVILIDAD_ID);

ALTER TABLE BASE_DE_GATOS_2.ENVIO_PEDIDO
ADD CONSTRAINT FK_EP_REPARTIDOR_ENVIO_PEDIDO FOREIGN KEY (EP_REPARTIDOR) REFERENCES BASE_DE_GATOS_2.REPARTIDORES(REPARTIDOR_ID),
CONSTRAINT FK_EP_DIRECCION_ENVIO_PEDIDO FOREIGN KEY (EP_DIRECCION) REFERENCES BASE_DE_GATOS_2.DIRECCION(DIRECCION_ID);

ALTER TABLE BASE_DE_GATOS_2.MEDIOS_DE_PAGO
ADD CONSTRAINT FK_TIPO_MEDIO_PAGO_MEDIO_PAGO FOREIGN KEY (MP_TIPO) REFERENCES BASE_DE_GATOS_2.TIPO_MEDIO_DE_PAGO(TIPO_MEDIO_PAGO_ID),
CONSTRAINT FK_TIPO_MARCAS_TARJETA_MEDIO_PAGO FOREIGN KEY (MP_MARCA_TARJETA) REFERENCES BASE_DE_GATOS_2.MARCAS_TARJETA(MARCA_TARJETA_ID),
CONSTRAINT FK_TIPO_USUARIOS_MEDIO_PAGO FOREIGN KEY (MP_USUARIO) REFERENCES BASE_DE_GATOS_2.USUARIOS(USUARIO_ID);

ALTER TABLE BASE_DE_GATOS_2.DIRECCION_USUARIO
ADD CONSTRAINT FK_USUARIOS_DIRECCION_USUARIO FOREIGN KEY (DU_USUARIO_ID) REFERENCES BASE_DE_GATOS_2.USUARIOS (USUARIO_ID),
CONSTRAINT FK_DIRECCION_DIRECCION_USUARIO FOREIGN KEY (DU_DIRECCION_ID) REFERENCES BASE_DE_GATOS_2.DIRECCION (DIRECCION_ID);

ALTER TABLE BASE_DE_GATOS_2.PEDIDOS
ADD CONSTRAINT FK_ESTADO_PEDIDO_PEDIDOS FOREIGN KEY (PEDIDO_ESTADO) REFERENCES BASE_DE_GATOS_2.ESTADO_PEDIDO(ESTADO_PEDIDO_ID),
CONSTRAINT FK_USUARIO_PEDIDOS FOREIGN KEY (PEDIDO_USUARIO) REFERENCES BASE_DE_GATOS_2.USUARIOS(USUARIO_ID),
CONSTRAINT FK_LOCAL_PEDIDOS FOREIGN KEY (PEDIDO_LOCAL) REFERENCES BASE_DE_GATOS_2.LOCALES(LOCAL_ID),
CONSTRAINT FK_MEDIO_DE_PAGO_PEDIDOS FOREIGN KEY (PEDIDO_MEDIO_PAGO) REFERENCES BASE_DE_GATOS_2.MEDIOS_DE_PAGO(MP_ID),
CONSTRAINT FK_PEDIDO_ENVIO_PEDIDO FOREIGN KEY (PEDIDO_ENVIO_PEDIDO_ID) REFERENCES BASE_DE_GATOS_2.ENVIO_PEDIDO(EP_ID);

ALTER TABLE BASE_DE_GATOS_2.RECLAMOS
ADD CONSTRAINT FK_TIPO_RECLAMO_RECLAMOS FOREIGN KEY (RECLAMO_TIPO) REFERENCES BASE_DE_GATOS_2.TIPO_RECLAMO(TIPO_RECLAMO_ID),
CONSTRAINT FK_ESTADO_RECLAMO_RECLAMOS FOREIGN KEY (RECLAMO_ESTADO) REFERENCES BASE_DE_GATOS_2.ESTADO_RECLAMO(ESTADO_RECLAMO_ID),
CONSTRAINT FK_SOLUCION_RECLAMO_RECLAMOS FOREIGN KEY (RECLAMO_SOLUCION) REFERENCES BASE_DE_GATOS_2.SOLUCION_RECLAMO(SOLUCION_RECLAMO_ID),
CONSTRAINT FK_USUARIOS_RECLAMOS FOREIGN KEY (RECLAMO_USUARIO) REFERENCES BASE_DE_GATOS_2.USUARIOS(USUARIO_ID),
CONSTRAINT FK_PEDIDOS_RECLAMOS FOREIGN KEY (RECLAMO_PEDIDO) REFERENCES BASE_DE_GATOS_2.PEDIDOS(PEDIDO_NUMERO),
CONSTRAINT FK_OPERADORES_RECLAMOS FOREIGN KEY (RECLAMO_OPERADOR) REFERENCES BASE_DE_GATOS_2.OPERADORES(OPERADOR_ID);

ALTER TABLE BASE_DE_GATOS_2.ENVIO_MENSAJERIA
ADD CONSTRAINT FK_ESTADO_ENVIO_MENSAJERIA FOREIGN KEY (EM_ESTADO) REFERENCES BASE_DE_GATOS_2.ESTADO_ENVIO_MENSAJERIA (ESTADO_EM_ID),
CONSTRAINT FK_USUARIO_ENVIO_MENSAJERIA FOREIGN KEY (EM_USUARIO) REFERENCES BASE_DE_GATOS_2.USUARIOS (USUARIO_ID),
CONSTRAINT FK_TIPO_PAQUETE_ENVIO_MENSAJERIA FOREIGN KEY (EM_TIPO_PAQUETE) REFERENCES BASE_DE_GATOS_2.TIPO_PAQUETES (TP_ID),
CONSTRAINT FK_REPARTIDOR_ENVIO_MENSAJERIA FOREIGN KEY (EM_REPARTIDOR) REFERENCES BASE_DE_GATOS_2.REPARTIDORES (REPARTIDOR_ID),
CONSTRAINT FK_MEDIO_DE_PAGO_ENVIO_MENSAJERIA FOREIGN KEY (EM_MEDIO_DE_PAGO) REFERENCES BASE_DE_GATOS_2.MEDIOS_DE_PAGO (MP_ID);


--Tipo paquetes
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_tipos_paquete')
DROP PROCEDURE migrar_tipos_paquete
GO
CREATE PROCEDURE migrar_tipos_paquete
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.TIPO_PAQUETES (TP_NOMBRE, TP_ALTO_MAX, TP_ANCHO_MAX, TP_LARGO_MAX, TP_PESO_MAX, TP_TIPO_PRECIO)
			SELECT DISTINCT
				PAQUETE_TIPO,
				PAQUETE_ALTO_MAX,
				PAQUETE_ANCHO_MAX,
				PAQUETE_LARGO_MAX,
				PAQUETE_PESO_MAX,
				PAQUETE_TIPO_PRECIO
			FROM 
				gd_esquema.Maestra
			WHERE 
				PAQUETE_TIPO IS NOT NULL
				AND PAQUETE_ALTO_MAX IS NOT NULL
				AND PAQUETE_ANCHO_MAX IS NOT NULL
				AND PAQUETE_LARGO_MAX IS NOT NULL
				AND PAQUETE_PESO_MAX IS NOT NULL
				AND PAQUETE_TIPO_PRECIO IS NOT NULL
		END
GO

--Estado envio mensajeria
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_estados_envio_mensajeria')
DROP PROCEDURE migrar_estados_envio_mensajeria
GO
CREATE PROCEDURE migrar_estados_envio_mensajeria
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.ESTADO_ENVIO_MENSAJERIA(ESTADO_EM_NOMBRE)
			SELECT DISTINCT
				ENVIO_MENSAJERIA_ESTADO
			FROM 
				gd_esquema.Maestra
			WHERE 
				ENVIO_MENSAJERIA_ESTADO IS NOT NULL
		END
GO

-- Horario dias
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_horario_dias')
DROP PROCEDURE migrar_horario_dias
GO
CREATE PROCEDURE migrar_horario_dias
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.HORARIO_DIAS(HORARIO_LOCAL_DIA)
			SELECT DISTINCT
				HORARIO_LOCAL_DIA
			FROM 
				gd_esquema.Maestra
			WHERE 
				HORARIO_LOCAL_DIA IS NOT NULL
		END
GO

--Local tipos
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_local_tipos')
DROP PROCEDURE migrar_local_tipos
GO
CREATE PROCEDURE migrar_local_tipos
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.LOCAL_TIPOS(LOCAL_TIPO_NOMBRE)
			SELECT DISTINCT
				LOCAL_TIPO
			FROM 
				gd_esquema.Maestra
			WHERE 
				LOCAL_TIPO IS NOT NULL
		END
GO

--Local categorias
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_local_categorias')
DROP PROCEDURE migrar_local_categorias
GO
CREATE PROCEDURE migrar_local_categorias
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.LOCAL_CATEGORIAS(LOCAL_CATEGORIA_NOMBRE, LOCAL_TIPO_ID)
			SELECT DISTINCT
				m.LOCAL_TIPO,
				lt.LOCAL_TIPO_ID
			FROM 
				gd_esquema.Maestra m
					JOIN BASE_DE_GATOS_2.LOCAL_TIPOS lt ON m.LOCAL_TIPO = lt.LOCAL_TIPO_NOMBRE
			WHERE 
				m.LOCAL_TIPO IS NOT NULL
		END
GO

--Locales
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_locales')
DROP PROCEDURE migrar_locales
GO
CREATE PROCEDURE migrar_locales
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.LOCALES(LOCAL_NOMBRE, LOCAL_DESCRIPCION, LOCAL_DIRECCION_ID, LOCAL_CATEGORIA_ID)
			SELECT DISTINCT
				m.LOCAL_NOMBRE,
				m.LOCAL_DESCRIPCION,
				d.DIRECCION_ID,
				lc.LOCAL_CATEGORIA_ID
			FROM 
				gd_esquema.Maestra m
					JOIN BASE_DE_GATOS_2.LOCAL_CATEGORIAS lc ON m.LOCAL_TIPO = lc.LOCAL_CATEGORIA_NOMBRE 
					JOIN BASE_DE_GATOS_2.PROVINCIAS p ON m.LOCAL_PROVINCIA = p.PROVINCIA_NOMBRE
					JOIN BASE_DE_GATOS_2.LOCALIDADES l ON m.LOCAL_LOCALIDAD = l.LOCALIDAD_NOMBRE AND l.LOCALIDAD_PROVINCIA_ID = p.PROVINCIA_ID
					JOIN BASE_DE_GATOS_2.DIRECCION d ON m.LOCAL_DIRECCION = d.DIRECCION_DIRECCION AND d.LOCALIDAD_ID = l.LOCALIDAD_ID
			WHERE 
				m.LOCAL_NOMBRE IS NOT NULL AND
				m.LOCAL_DESCRIPCION IS NOT NULL AND
				m.LOCAL_DIRECCION IS NOT NULL AND
				m.LOCAL_LOCALIDAD IS NOT NULL AND
				m.LOCAL_TIPO IS NOT NULL 
		END
GO

-- Horarios
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_horarios')
DROP PROCEDURE migrar_horarios
GO
CREATE PROCEDURE migrar_horarios
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.HORARIOS(HORARIO_DIA_ID, HORARIO_LOCAL_HORA_APERTURA, HORARIO_LOCAL_HORA_CIERRE, LOCAL_ID)
			SELECT DISTINCT
				hd.HORARIO_DIA_ID,
				m.HORARIO_LOCAL_HORA_APERTURA,
				m.HORARIO_LOCAL_HORA_CIERRE,
				l.LOCAL_ID
			FROM 
				BASE_DE_GATOS_2.HORARIO_DIAS hd
					JOIN gd_esquema.Maestra m ON
						hd.HORARIO_LOCAL_DIA = m.HORARIO_LOCAL_DIA
					JOIN BASE_DE_GATOS_2.LOCALES l ON
						l.LOCAL_NOMBRE = m.LOCAL_NOMBRE
			WHERE
				hd.HORARIO_DIA_ID IS NOT NULL
				AND m.HORARIO_LOCAL_HORA_APERTURA IS NOT NULL
				AND m.HORARIO_LOCAL_HORA_CIERRE IS NOT NULL
				AND l.LOCAL_NOMBRE IS NOT NULL
		END
GO

--Productos
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_productos')
DROP PROCEDURE migrar_productos
GO
CREATE PROCEDURE migrar_productos
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.PRODUCTOS(PRODUCTO_CODIGO, PRODUCTO_NOMBRE, PRODUCTO_DESCRIPCION)
			SELECT DISTINCT
				PRODUCTO_LOCAL_CODIGO,
				PRODUCTO_LOCAL_NOMBRE,
				PRODUCTO_LOCAL_DESCRIPCION
			FROM 
				gd_esquema.Maestra
			WHERE 
				PRODUCTO_LOCAL_CODIGO IS NOT NULL AND
				PRODUCTO_LOCAL_NOMBRE IS NOT NULL AND
				PRODUCTO_LOCAL_DESCRIPCION IS NOT NULL
		END
GO

-- Local producto
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_local_producto')
DROP PROCEDURE migrar_local_producto
GO
CREATE PROCEDURE migrar_local_producto
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.LOCAL_PRODUCTO(LP_LOCAL_ID, LP_PRODUCTO_ID, LP_PRODUCTO_PRECIO)
			SELECT DISTINCT
				l.LOCAL_ID,
				p.PRODUCTO_ID,
				m.PRODUCTO_LOCAL_PRECIO
			FROM 
				gd_esquema.Maestra m
					JOIN BASE_DE_GATOS_2.PRODUCTOS p ON 
						m.PRODUCTO_LOCAL_CODIGO = p.PRODUCTO_CODIGO
						AND m.PRODUCTO_LOCAL_NOMBRE = p.PRODUCTO_NOMBRE
						AND m.PRODUCTO_LOCAL_DESCRIPCION = p.PRODUCTO_DESCRIPCION
					JOIN BASE_DE_GATOS_2.LOCALES l ON
						l.LOCAL_NOMBRE = m.LOCAL_NOMBRE
						AND l.LOCAL_DESCRIPCION = m.LOCAL_DESCRIPCION
		END
GO

--Usuarios
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_usuarios')
DROP PROCEDURE migrar_usuarios
GO
CREATE PROCEDURE migrar_usuarios
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.USUARIOS(USUARIO_NOMBRE, USUARIO_APELLIDO, USUARIO_DNI, USUARIO_FECHA_REGISTRO, USUARIO_TELEFONO, USUARIO_MAIL, USUARIO_FECHA_NAC)
			SELECT DISTINCT
				m.USUARIO_NOMBRE,
				m.USUARIO_APELLIDO,
				m.USUARIO_DNI,
				m.USUARIO_FECHA_REGISTRO,
				m.USUARIO_TELEFONO,
				m.USUARIO_MAIL,
				m.USUARIO_FECHA_NAC
			FROM 
				gd_esquema.Maestra m
			WHERE 
				m.USUARIO_NOMBRE IS NOT NULL AND
				m.USUARIO_APELLIDO IS NOT NULL AND
				m.USUARIO_DNI IS NOT NULL AND
				m.USUARIO_FECHA_REGISTRO IS NOT NULL AND
				m.USUARIO_TELEFONO IS NOT NULL AND
				m.USUARIO_MAIL IS NOT NULL AND
				m.USUARIO_FECHA_NAC IS NOT NULL
		END
GO

-- Movilidad
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_movilidades')
DROP PROCEDURE migrar_movilidades
GO
CREATE PROCEDURE migrar_movilidades
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.MOVILIDAD(MOVILIDAD_TIPO)
			SELECT DISTINCT
				m.REPARTIDOR_TIPO_MOVILIDAD
			FROM 
				gd_esquema.Maestra m
			WHERE 
				m.REPARTIDOR_TIPO_MOVILIDAD IS NOT NULL
		END
GO

-- Repartidores
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_repartidores')
DROP PROCEDURE migrar_repartidores
GO
CREATE PROCEDURE migrar_repartidores
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.REPARTIDORES(
			REPARTIDOR_NOMBRE,
			REPARTIDOR_APELLIDO,
			REPARTIDOR_DNI,
			REPARTIDOR_TELEFONO,
			REPARTIDOR_DIRECION,
			REPARTIDOR_EMAIL,
			REPARTIDOR_FECHA_NAC,
			REPARTIDOR_LOCALIDAD_ACTIVA,
			REPARTIDOR_TIPO_MOVILIDAD
		)
			SELECT DISTINCT
				m.REPARTIDOR_NOMBRE,
				m.REPARTIDOR_APELLIDO,
				m.REPARTIDOR_DNI,
				m.REPARTIDOR_TELEFONO,
				m.REPARTIDOR_DIRECION,
				m.REPARTIDOR_EMAIL,
				m.REPARTIDOR_FECHA_NAC,
				l.LOCALIDAD_ID,
				tm.MOVILIDAD_ID
			FROM 
				gd_esquema.Maestra m
				JOIN BASE_DE_GATOS_2.MOVILIDAD tm ON
					m.REPARTIDOR_TIPO_MOVILIDAD = tm.MOVILIDAD_TIPO
				JOIN BASE_DE_GATOS_2.PROVINCIAS p ON 
					m.DIRECCION_USUARIO_PROVINCIA = p.PROVINCIA_NOMBRE
				JOIN BASE_DE_GATOS_2.LOCALIDADES l ON
					m.DIRECCION_USUARIO_LOCALIDAD = l.LOCALIDAD_NOMBRE AND
					l.LOCALIDAD_PROVINCIA_ID = p.PROVINCIA_ID
			WHERE 
				m.REPARTIDOR_NOMBRE IS NOT NULL AND
				m.REPARTIDOR_APELLIDO IS NOT NULL AND
				m.REPARTIDOR_DNI IS NOT NULL AND
				m.REPARTIDOR_TELEFONO IS NOT NULL AND
				m.REPARTIDOR_DIRECION IS NOT NULL AND
				m.REPARTIDOR_EMAIL IS NOT NULL AND
				m.REPARTIDOR_FECHA_NAC IS NOT NULL AND
				m.REPARTIDOR_TIPO_MOVILIDAD IS NOT NULL
		END
GO

-- Envio mensajeria
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_envio_mensajeria')
DROP PROCEDURE migrar_envio_mensajeria
GO
CREATE PROCEDURE migrar_envio_mensajeria
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.ENVIO_MENSAJERIA(
			EM_NUMERO, EM_DIR_ORIGEN, EM_DIR_DEST, EM_LOCALIDAD_ID, EM_KILOMETROS, EM_VALOR_ASEGURADO, EM_PRECIO_ENVIO, EM_PRECIO_SEGURO,
		EM_PROPINA, EM_TOTAL, EM_OBSERVACION, EM_FECHA, EM_FECHA_ENTREGA, EM_TIEMPO_ESTIMADO, EM_CALIFICACION, EM_ESTADO, EM_USUARIO, EM_TIPO_PAQUETE,
		EM_REPARTIDOR, EM_MEDIO_DE_PAGO)
			SELECT DISTINCT
				m.ENVIO_MENSAJERIA_NRO,
				m.ENVIO_MENSAJERIA_DIR_ORIG,
				m.ENVIO_MENSAJERIA_DIR_DEST,
				l.LOCALIDAD_ID,
				m.ENVIO_MENSAJERIA_KM,
				m.ENVIO_MENSAJERIA_VALOR_ASEGURADO,
				m.ENVIO_MENSAJERIA_PRECIO_ENVIO,
				m.ENVIO_MENSAJERIA_PRECIO_SEGURO,
				m.ENVIO_MENSAJERIA_PROPINA,
				m.ENVIO_MENSAJERIA_TOTAL,
				m.ENVIO_MENSAJERIA_OBSERV,
				m.ENVIO_MENSAJERIA_FECHA,
				m.ENVIO_MENSAJERIA_FECHA_ENTREGA,
				m.ENVIO_MENSAJERIA_TIEMPO_ESTIMADO,
				m.ENVIO_MENSAJERIA_CALIFICACION,
				eme.ESTADO_EM_ID,
				u.USUARIO_ID,
				tp.TP_ID,
				r.REPARTIDOR_ID,
				mp.MP_ID
			FROM 
				gd_esquema.Maestra m
			JOIN BASE_DE_GATOS_2.PROVINCIAS prov
				ON m.ENVIO_MENSAJERIA_PROVINCIA = prov.PROVINCIA_NOMBRE
			JOIN BASE_DE_GATOS_2.LOCALIDADES l
				ON m.ENVIO_MENSAJERIA_LOCALIDAD = l.LOCALIDAD_NOMBRE
				AND prov.PROVINCIA_ID = l.LOCALIDAD_PROVINCIA_ID
			JOIN BASE_DE_GATOS_2.ESTADO_ENVIO_MENSAJERIA eme
				ON m.ENVIO_MENSAJERIA_ESTADO = eme.ESTADO_EM_NOMBRE
			JOIN BASE_DE_GATOS_2.USUARIOS u
				ON m.USUARIO_DNI = u.USUARIO_DNI
			JOIN BASE_DE_GATOS_2.TIPO_PAQUETES tp
				ON m.PAQUETE_TIPO = tp.TP_NOMBRE
			JOIN BASE_DE_GATOS_2.REPARTIDORES r
				ON m.REPARTIDOR_DNI = r.REPARTIDOR_DNI AND
				m.REPARTIDOR_EMAIL = r.REPARTIDOR_EMAIL
			JOIN BASE_DE_GATOS_2.TIPO_MEDIO_DE_PAGO tmp
				ON m.MEDIO_PAGO_TIPO = tmp.TMP_TIPO
			JOIN BASE_DE_GATOS_2.MEDIOS_DE_PAGO mp
				ON tmp.TIPO_MEDIO_PAGO_ID = mp.MP_TIPO AND
				m.MEDIO_PAGO_NRO_TARJETA = mp.MP_NUMERO_TARJETA
			WHERE 
				m.PEDIDO_ESTADO IS NOT NULL
		END
GO

--Estado pedido
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_estados_pedido')
DROP PROCEDURE migrar_estados_pedido
GO
CREATE PROCEDURE migrar_estados_pedido
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.ESTADO_PEDIDO(ESTADO_PEDIDO_NOMBRE)
			SELECT DISTINCT
				m.PEDIDO_ESTADO
			FROM 
				gd_esquema.Maestra m
			WHERE 
				m.PEDIDO_ESTADO IS NOT NULL
		END
GO

-- Envio pedido
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_envio_pedidos')
DROP PROCEDURE migrar_envio_pedidos
GO
CREATE PROCEDURE migrar_envio_pedidos
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.ENVIO_PEDIDO(EP_PRECIO, EP_PROPINA, EP_REPARTIDOR, EP_DIRECCION)
			SELECT DISTINCT
				m.PEDIDO_PRECIO_ENVIO,
				m.PEDIDO_PROPINA,
				r.REPARTIDOR_ID,
				d.DIRECCION_ID
			FROM 
				gd_esquema.Maestra m
			JOIN BASE_DE_GATOS_2.DIRECCION d
				ON m.DIRECCION_USUARIO_DIRECCION = d.DIRECCION_DIRECCION
			JOIN BASE_DE_GATOS_2.DIRECCION_USUARIO du
				ON d.DIRECCION_ID = du.DU_DIRECCION_ID AND
				m.DIRECCION_USUARIO_NOMBRE = du.DU_DIRECCION_NOMBRE
			JOIN BASE_DE_GATOS_2.REPARTIDORES r
				ON m.REPARTIDOR_DNI = r.REPARTIDOR_DNI
			WHERE 
				m.DIRECCION_USUARIO_DIRECCION IS NOT NULL AND
				m.DIRECCION_USUARIO_NOMBRE IS NOT NULL AND
				m.REPARTIDOR_DNI IS NOT NULL
		END
GO

-- Pedidos
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_pedidos')
DROP PROCEDURE migrar_pedidos
GO
CREATE PROCEDURE migrar_pedidos
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.PEDIDOS(
			PEDIDO_NUMERO,
			PEDIDO_TOTAL_PRODUCTOS,
			PEDIDO_TARIFA_SERVICIO,
			PEDIDO_TOTAL_CUPONES,
			PEDIDO_TOTAL_SERVICIO,
			PEDIDO_OBSERV,
			PEDIDO_FECHA_ENTREGA,
			PEDIDO_FECHA,
			PEDIDO_TIEMPO_ESTIMADO_ENTREGA,
			PEDIDO_CALIFICACION,
			PEDIDO_ESTADO,
			PEDIDO_USUARIO,
			PEDIDO_LOCAL,
			PEDIDO_MEDIO_PAGO,
			PEDIDO_ENVIO_PEDIDO_ID
		)
			SELECT DISTINCT
				m.PEDIDO_NRO,
				m.PEDIDO_TOTAL_PRODUCTOS,
				m.PEDIDO_TARIFA_SERVICIO,
				m.PEDIDO_TOTAL_CUPONES,
				m.PEDIDO_TOTAL_SERVICIO,
				m.PEDIDO_OBSERV,
				m.PEDIDO_FECHA_ENTREGA,
				m.PEDIDO_FECHA,
				m.PEDIDO_TIEMPO_ESTIMADO_ENTREGA,
				m.PEDIDO_CALIFICACION,
				estp.ESTADO_PEDIDO_ID,
				u.USUARIO_ID,
				l.LOCAL_ID,
				mdp.MP_ID,
				ep.EP_ID
			FROM
				gd_esquema.Maestra m
					JOIN BASE_DE_GATOS_2.ESTADO_PEDIDO estp
						ON m.PEDIDO_ESTADO = estp.ESTADO_PEDIDO_NOMBRE
					JOIN BASE_DE_GATOS_2.USUARIOS u 
						ON m.USUARIO_DNI = u.USUARIO_DNI
					JOIN BASE_DE_GATOS_2.DIRECCION d
						ON m.LOCAL_DIRECCION = d.DIRECCION_DIRECCION
					JOIN BASE_DE_GATOS_2.LOCALES l
						ON m.LOCAL_DESCRIPCION = l.LOCAL_DESCRIPCION AND
						m.LOCAL_NOMBRE = l.LOCAL_NOMBRE AND
						d.DIRECCION_ID = l.LOCAL_DIRECCION_ID
					JOIN BASE_DE_GATOS_2.TIPO_MEDIO_DE_PAGO tmp
						ON tmp.TMP_TIPO = m.MEDIO_PAGO_TIPO
					JOIN BASE_DE_GATOS_2.MEDIOS_DE_PAGO mdp
						ON m.MEDIO_PAGO_NRO_TARJETA = mdp.MP_NUMERO_TARJETA
						AND mdp.MP_TIPO = tmp.TIPO_MEDIO_PAGO_ID
					JOIN BASE_DE_GATOS_2.ENVIO_PEDIDO ep
						ON m.PEDIDO_PRECIO_ENVIO = ep.EP_PRECIO AND
						m.PEDIDO_PROPINA = ep.EP_PROPINA
			WHERE 
				m.PEDIDO_NRO IS NOT NULL AND
				m.PEDIDO_TOTAL_PRODUCTOS IS NOT NULL AND
				m.PEDIDO_TARIFA_SERVICIO IS NOT NULL AND
				m.PEDIDO_TOTAL_CUPONES IS NOT NULL AND
				m.PEDIDO_TOTAL_SERVICIO IS NOT NULL AND
				m.PEDIDO_OBSERV IS NOT NULL AND
				m.PEDIDO_FECHA_ENTREGA IS NOT NULL AND
				m.PEDIDO_FECHA IS NOT NULL AND
				m.PEDIDO_TIEMPO_ESTIMADO_ENTREGA IS NOT NULL AND
				m.PEDIDO_CALIFICACION IS NOT NULL
		END
GO

-- Operadores
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_operadores')
DROP PROCEDURE migrar_operadores
GO
CREATE PROCEDURE migrar_operadores
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.OPERADORES(OPERADOR_NOMBRE, OPERADOR_APELLIDO, OPERADOR_DNI, OPERADOR_TELEFONO, OPERADOR_DIRECCION, OPERADOR_MAIL, OPERADOR_FECHA_NAC)
			SELECT DISTINCT
				m.OPERADOR_RECLAMO_NOMBRE,
				m.OPERADOR_RECLAMO_APELLIDO,
				m.OPERADOR_RECLAMO_DNI,
				m.OPERADOR_RECLAMO_TELEFONO,
				m.OPERADOR_RECLAMO_DIRECCION,
				m.OPERADOR_RECLAMO_MAIL,
				m.OPERADOR_RECLAMO_FECHA_NAC
			FROM 
				gd_esquema.Maestra m
			WHERE 
				m.OPERADOR_RECLAMO_NOMBRE IS NOT NULL AND
				m.OPERADOR_RECLAMO_APELLIDO IS NOT NULL AND
				m.OPERADOR_RECLAMO_DNI IS NOT NULL AND
				m.OPERADOR_RECLAMO_TELEFONO IS NOT NULL AND
				m.OPERADOR_RECLAMO_DIRECCION IS NOT NULL AND
				m.OPERADOR_RECLAMO_MAIL IS NOT NULL AND
				m.OPERADOR_RECLAMO_FECHA_NAC IS NOT NULL
		END
GO

--Tipo reclamo
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_tipo_reclamo')
DROP PROCEDURE migrar_tipo_reclamo
GO
CREATE PROCEDURE migrar_tipo_reclamo
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.TIPO_RECLAMO(TIPO_RECLAMO_TIPO)
			SELECT DISTINCT
				m.RECLAMO_TIPO
			FROM 
				gd_esquema.Maestra m
			WHERE 
				m.RECLAMO_TIPO IS NOT NULL
		END
GO

--Estado reclamo
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_estado_reclamo')
DROP PROCEDURE migrar_estado_reclamo
GO
CREATE PROCEDURE migrar_estado_reclamo
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.ESTADO_RECLAMO(ESTADO_RECLAMO_ESTADO)
			SELECT DISTINCT
				m.RECLAMO_ESTADO
			FROM 
				gd_esquema.Maestra m
			WHERE 
				m.RECLAMO_ESTADO IS NOT NULL
		END
GO

--Solucion reclamo
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_solucion_reclamo')
DROP PROCEDURE migrar_solucion_reclamo
GO
CREATE PROCEDURE migrar_solucion_reclamo
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.SOLUCION_RECLAMO(SOLUCION_RECLAMO_SOLUCION)
			SELECT DISTINCT
				m.RECLAMO_SOLUCION
			FROM 
				gd_esquema.Maestra m
			WHERE 
				m.RECLAMO_SOLUCION IS NOT NULL
		END
GO

-- Reclamos
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_reclamos')
DROP PROCEDURE migrar_reclamos
GO
CREATE PROCEDURE migrar_reclamos
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.RECLAMOS(RECLAMO_NUMERO, RECLAMO_FECHA, RECLAMO_DESCRIPCION, RECLAMO_FECHA_SOLUCION, RECLAMO_CALIFICACION, RECLAMO_SOLUCION, RECLAMO_TIPO, RECLAMO_ESTADO, RECLAMO_USUARIO, RECLAMO_PEDIDO, RECLAMO_OPERADOR)
			SELECT DISTINCT
				m.RECLAMO_NRO,
				m.RECLAMO_FECHA,
				m.RECLAMO_DESCRIPCION,
				m.RECLAMO_FECHA_SOLUCION,
				m.RECLAMO_CALIFICACION,
				s.SOLUCION_RECLAMO_ID,
				t.TIPO_RECLAMO_ID,
				e.ESTADO_RECLAMO_ID,
				u.USUARIO_ID,
				p.PEDIDO_NUMERO,
				o.OPERADOR_ID
			FROM 
				gd_esquema.Maestra m
					JOIN BASE_DE_GATOS_2.SOLUCION_RECLAMO s ON
						m.RECLAMO_SOLUCION = s.SOLUCION_RECLAMO_SOLUCION
					JOIN BASE_DE_GATOS_2.TIPO_RECLAMO t ON
						m.RECLAMO_TIPO = t.TIPO_RECLAMO_TIPO
					JOIN BASE_DE_GATOS_2.ESTADO_RECLAMO e ON
						m.RECLAMO_ESTADO = e.ESTADO_RECLAMO_ESTADO
					JOIN BASE_DE_GATOS_2.USUARIOS u ON
						m.USUARIO_DNI = u.USUARIO_DNI
					JOIN BASE_DE_GATOS_2.OPERADORES o ON
						m.OPERADOR_RECLAMO_DNI = o.OPERADOR_DNI
					JOIN BASE_DE_GATOS_2.PEDIDOS p ON
						m.PEDIDO_NRO = p.PEDIDO_NUMERO
			WHERE
				m.RECLAMO_NRO IS NOT NULL AND
				m.RECLAMO_FECHA IS NOT NULL AND
				m.RECLAMO_DESCRIPCION IS NOT NULL AND
				m.RECLAMO_FECHA_SOLUCION IS NOT NULL AND
				m.PEDIDO_NRO IS NOT NULL 
		END
GO

--Provincias
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_provincias')
DROP PROCEDURE migrar_provincias
GO
CREATE PROCEDURE migrar_provincias
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.PROVINCIAS(PROVINCIA_NOMBRE)
			SELECT DISTINCT
				m.DIRECCION_USUARIO_PROVINCIA
			FROM gd_esquema.Maestra m
			WHERE m.DIRECCION_USUARIO_PROVINCIA IS NOT NULL

			UNION
			
			SELECT 
				m.ENVIO_MENSAJERIA_PROVINCIA
			FROM gd_esquema.Maestra m
			WHERE m.ENVIO_MENSAJERIA_PROVINCIA IS NOT NULL

			UNION

			SELECT 
				m.LOCAL_PROVINCIA
			FROM gd_esquema.Maestra m
			WHERE m.LOCAL_PROVINCIA IS NOT NULL
		END
GO


-- Local Producto Pedido
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_local_producto_pedido')
DROP PROCEDURE migrar_local_producto_pedido
GO
CREATE PROCEDURE migrar_local_producto_pedido
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.LOCAL_PRODUCTO_PEDIDO(
			LPC_LP_LOCAL_ID,
			LPC_LP_PRODUCTO_ID,
			LPC_PEDIDO_ID,
			LPC_PRODUCTO_CANTIDAD,
			LPC_PRODUCTO_PRECIO
		)
			SELECT 
				lp.LP_LOCAL_ID,
				lp.LP_PRODUCTO_ID,
				ped.PEDIDO_NUMERO,
				m.PRODUCTO_CANTIDAD,
				m.PRODUCTO_LOCAL_PRECIO
			FROM
				BASE_DE_GATOS_2.LOCAL_PRODUCTO lp
					JOIN BASE_DE_GATOS_2.LOCALES l ON
						lp.LP_LOCAL_ID = l.LOCAL_ID
					JOIN BASE_DE_GATOS_2.PRODUCTOS p ON
						lp.LP_PRODUCTO_ID = p.PRODUCTO_ID
					JOIN BASE_DE_GATOS_2.DIRECCION d ON
						l.LOCAL_DIRECCION_ID = d.DIRECCION_ID
					JOIN BASE_DE_GATOS_2.LOCALIDADES loc ON
						loc.LOCALIDAD_ID = d.LOCALIDAD_ID
					JOIN gd_esquema.Maestra m ON
						l.LOCAL_NOMBRE = m.LOCAL_NOMBRE
						AND l.LOCAL_DESCRIPCION = m.LOCAL_DESCRIPCION
						AND d.DIRECCION_DIRECCION = m.LOCAL_DIRECCION
						AND loc.LOCALIDAD_NOMBRE = m.LOCAL_LOCALIDAD
						AND p.PRODUCTO_CODIGO = m.PRODUCTO_LOCAL_CODIGO
						AND p.PRODUCTO_NOMBRE = m.PRODUCTO_LOCAL_NOMBRE
						AND p.PRODUCTO_DESCRIPCION = m.PRODUCTO_LOCAL_DESCRIPCION
					JOIN BASE_DE_GATOS_2.PEDIDOS ped ON
						ped.PEDIDO_NUMERO = m.PEDIDO_NRO
			END
GO

-- Localidades
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_localidades')
DROP PROCEDURE migrar_localidades
GO
CREATE PROCEDURE migrar_localidades
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.LOCALIDADES(LOCALIDAD_NOMBRE, LOCALIDAD_PROVINCIA_ID)
			SELECT DISTINCT 
				m.ENVIO_MENSAJERIA_LOCALIDAD, 
				p.PROVINCIA_ID
			FROM gd_esquema.Maestra m
				JOIN BASE_DE_GATOS_2.PROVINCIAS p ON m.ENVIO_MENSAJERIA_PROVINCIA = p.PROVINCIA_NOMBRE

			UNION

			SELECT DISTINCT 
				DIRECCION_USUARIO_LOCALIDAD,
				p.PROVINCIA_ID
			FROM gd_esquema.Maestra m
				JOIN BASE_DE_GATOS_2.PROVINCIAS p ON m.DIRECCION_USUARIO_PROVINCIA = p.PROVINCIA_NOMBRE

			UNION

			SELECT DISTINCT 
				m.LOCAL_LOCALIDAD,
				p.PROVINCIA_ID
			FROM gd_esquema.Maestra m
				JOIN BASE_DE_GATOS_2.PROVINCIAS p ON m.LOCAL_PROVINCIA = p.PROVINCIA_NOMBRE
		END
GO

-- Direcciones
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_direcciones')
DROP PROCEDURE migrar_direcciones
GO
CREATE PROCEDURE migrar_direcciones
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.DIRECCION(DIRECCION_DIRECCION, LOCALIDAD_ID)
			SELECT DISTINCT 
				m.ENVIO_MENSAJERIA_DIR_ORIG direcciones,
				l.LOCALIDAD_ID
			FROM gd_esquema.Maestra m
				JOIN BASE_DE_GATOS_2.PROVINCIAS p ON m.ENVIO_MENSAJERIA_PROVINCIA = p.PROVINCIA_NOMBRE
				JOIN BASE_DE_GATOS_2.LOCALIDADES l ON m.ENVIO_MENSAJERIA_LOCALIDAD = l.LOCALIDAD_NOMBRE AND l.LOCALIDAD_PROVINCIA_ID = p.PROVINCIA_ID

			UNION

			SELECT DISTINCT 
				m.ENVIO_MENSAJERIA_DIR_DEST,
				l.LOCALIDAD_ID
			FROM gd_esquema.Maestra m
				JOIN BASE_DE_GATOS_2.PROVINCIAS p ON m.ENVIO_MENSAJERIA_PROVINCIA = p.PROVINCIA_NOMBRE
				JOIN BASE_DE_GATOS_2.LOCALIDADES l ON m.ENVIO_MENSAJERIA_LOCALIDAD = l.LOCALIDAD_NOMBRE AND l.LOCALIDAD_PROVINCIA_ID = p.PROVINCIA_ID

			UNION

			SELECT DISTINCT 
				m.DIRECCION_USUARIO_DIRECCION,
				l.LOCALIDAD_ID
			FROM gd_esquema.Maestra m
				JOIN BASE_DE_GATOS_2.PROVINCIAS p ON m.DIRECCION_USUARIO_PROVINCIA = p.PROVINCIA_NOMBRE
				JOIN BASE_DE_GATOS_2.LOCALIDADES l ON m.DIRECCION_USUARIO_LOCALIDAD = l.LOCALIDAD_NOMBRE AND l.LOCALIDAD_PROVINCIA_ID = p.PROVINCIA_ID

			UNION

			SELECT DISTINCT 
				LOCAL_DIRECCION,
				l.LOCALIDAD_ID
			FROM gd_esquema.Maestra m
				JOIN BASE_DE_GATOS_2.PROVINCIAS p ON m.LOCAL_PROVINCIA = p.PROVINCIA_NOMBRE
				JOIN BASE_DE_GATOS_2.LOCALIDADES l ON m.LOCAL_LOCALIDAD = l.LOCALIDAD_NOMBRE AND l.LOCALIDAD_PROVINCIA_ID = p.PROVINCIA_ID
		END
GO

-- Direccion usuario
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_direcciones_usuario')
DROP PROCEDURE migrar_direcciones_usuario
GO
CREATE PROCEDURE migrar_direcciones_usuario
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.DIRECCION_USUARIO(DU_USUARIO_ID, DU_DIRECCION_NOMBRE, DU_DIRECCION_ID)
			SELECT DISTINCT
				u.USUARIO_ID,
				m.DIRECCION_USUARIO_NOMBRE,
				d.DIRECCION_ID
			FROM gd_esquema.Maestra m
				JOIN BASE_DE_GATOS_2.PROVINCIAS p ON m.DIRECCION_USUARIO_PROVINCIA = p.PROVINCIA_NOMBRE
				JOIN BASE_DE_GATOS_2.LOCALIDADES l ON m.DIRECCION_USUARIO_LOCALIDAD = l.LOCALIDAD_NOMBRE AND l.LOCALIDAD_PROVINCIA_ID = p.PROVINCIA_ID
				JOIN BASE_DE_GATOS_2.DIRECCION d ON m.DIRECCION_USUARIO_DIRECCION = d.DIRECCION_DIRECCION AND d.LOCALIDAD_ID = l.LOCALIDAD_ID
				JOIN BASE_DE_GATOS_2.USUARIOS u ON m.USUARIO_NOMBRE = u.USUARIO_NOMBRE
					AND m.USUARIO_APELLIDO = u.USUARIO_APELLIDO
					AND m.USUARIO_DNI = u.USUARIO_DNI
					AND m.USUARIO_FECHA_REGISTRO = u.USUARIO_FECHA_REGISTRO
					AND m.USUARIO_TELEFONO = u.USUARIO_TELEFONO
					AND m.USUARIO_MAIL = u.USUARIO_MAIL
					AND m.USUARIO_FECHA_NAC = u.USUARIO_FECHA_NAC
			WHERE m.DIRECCION_USUARIO_NOMBRE IS NOT NULL
		END
GO

-- Horarios
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_horarios')
DROP PROCEDURE migrar_horarios
GO
CREATE PROCEDURE migrar_horarios
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.HORARIOS(HORARIO_DIA_ID, HORARIO_LOCAL_HORA_APERTURA, HORARIO_LOCAL_HORA_CIERRE, LOCAL_ID)
			SELECT DISTINCT
				hd.HORARIO_DIA_ID,
				m.HORARIO_LOCAL_HORA_APERTURA,
				m.HORARIO_LOCAL_HORA_CIERRE,
				l.LOCAL_ID
			FROM 
				BASE_DE_GATOS_2.HORARIO_DIAS hd
					JOIN gd_esquema.Maestra m ON
						hd.HORARIO_LOCAL_DIA = m.HORARIO_LOCAL_DIA
					JOIN BASE_DE_GATOS_2.LOCALES l ON
						l.LOCAL_NOMBRE = m.LOCAL_NOMBRE
			WHERE
				hd.HORARIO_DIA_ID IS NOT NULL
				AND m.HORARIO_LOCAL_HORA_APERTURA IS NOT NULL
				AND m.HORARIO_LOCAL_HORA_CIERRE IS NOT NULL
				AND l.LOCAL_NOMBRE IS NOT NULL
		END
GO

-- Cupones
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_cupones')
DROP PROCEDURE migrar_cupones
GO
CREATE PROCEDURE migrar_cupones
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.CUPONES(CUPON_NUMERO, CUPON_MONTO, CUPON_FECHA_ALTA, CUPON_FECHA_VENCIMIENTO, USUARIO_ID)
			SELECT DISTINCT
				m.CUPON_NRO,
				m.CUPON_MONTO,
				m.CUPON_FECHA_ALTA,
				m.CUPON_FECHA_VENCIMIENTO,
				u.USUARIO_ID
			FROM 
				gd_esquema.Maestra m
			JOIN BASE_DE_GATOS_2.USUARIOS u ON m.USUARIO_NOMBRE = u.USUARIO_NOMBRE
				AND m.USUARIO_APELLIDO = u.USUARIO_APELLIDO
				AND m.USUARIO_DNI = u.USUARIO_DNI
				AND m.USUARIO_FECHA_REGISTRO = u.USUARIO_FECHA_REGISTRO
				AND m.USUARIO_TELEFONO = u.USUARIO_TELEFONO
				AND m.USUARIO_MAIL = u.USUARIO_MAIL
				AND m.USUARIO_FECHA_NAC = u.USUARIO_FECHA_NAC
			WHERE 
				m.CUPON_NRO IS NOT NULL AND
				m.CUPON_MONTO IS NOT NULL AND
				m.CUPON_FECHA_ALTA IS NOT NULL AND
				m.CUPON_FECHA_VENCIMIENTO IS NOT NULL
		END
GO

-- Cupon tipo
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_pedido_cupon_tipo')
DROP PROCEDURE migrar_pedido_cupon_tipo
GO
CREATE PROCEDURE migrar_pedido_cupon_tipo
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.PEDIDO_CUPON_TIPO(PEDIDO_CUPON_TIPO_NOMBRE)
			SELECT DISTINCT
				m.CUPON_TIPO
			FROM 
				gd_esquema.Maestra m
			WHERE 
				m.CUPON_TIPO IS NOT NULL
		END
GO

-- Reclamo cupon tipo
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_reclamo_cupon_tipo')
DROP PROCEDURE migrar_reclamo_cupon_tipo
GO
CREATE PROCEDURE migrar_reclamo_cupon_tipo
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.RECLAMO_CUPON_TIPO(RECLAMO_CUPON_TIPO)
			SELECT DISTINCT
				m.CUPON_RECLAMO_TIPO
			FROM 
				gd_esquema.Maestra m
			WHERE 
				m.CUPON_RECLAMO_TIPO IS NOT NULL
		END
GO

-- Reclamo cupon
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_reclamo_cupon')
DROP PROCEDURE migrar_reclamo_cupon
GO
CREATE PROCEDURE migrar_reclamo_cupon
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.RECLAMO_CUPON(CUPON_NUMERO, RECLAMO_NUMERO, RECLAMO_CUPON_TIPO_ID)
			SELECT DISTINCT
				m.CUPON_RECLAMO_NRO,
				m.CUPON_TIPO,
				t.RECLAMO_CUPON_TIPO_ID
			FROM 
				gd_esquema.Maestra m
			JOIN BASE_DE_GATOS_2.CUPONES c ON m.CUPON_NRO = c.CUPON_NUMERO
			JOIN BASE_DE_GATOS_2.RECLAMO_CUPON_TIPO t ON m.CUPON_RECLAMO_TIPO = t.RECLAMO_CUPON_TIPO
			WHERE 
				m.CUPON_NRO IS NOT NULL AND
				m.CUPON_RECLAMO_NRO IS NOT NULL AND
				m.CUPON_RECLAMO_TIPO IS NOT NULL
		END
GO

-- Pedido cupon
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_pedido_cupon')
DROP PROCEDURE migrar_pedido_cupon
GO
CREATE PROCEDURE migrar_pedido_cupon
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.PEDIDO_CUPON(PEDIDO_NUMERO, CUPON_NUMERO, PEDIDO_CUPON_TIPO_ID)
			SELECT DISTINCT
				p.PEDIDO_NUMERO,
				m.CUPON_NRO,
				t.PEDIDO_CUPON_TIPO_ID
			FROM 
				gd_esquema.Maestra m
			JOIN BASE_DE_GATOS_2.PEDIDOS p ON m.PEDIDO_NRO = p.PEDIDO_NUMERO
			JOIN BASE_DE_GATOS_2.PEDIDO_CUPON_TIPO t ON m.CUPON_TIPO = t.PEDIDO_CUPON_TIPO_NOMBRE
			WHERE 
				m.CUPON_NRO IS NOT NULL AND
				m.PEDIDO_NRO IS NOT NULL
		END
GO

-- Marca tarjeta
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_marcas_tarjeta')
DROP PROCEDURE migrar_marcas_tarjeta
GO
CREATE PROCEDURE migrar_marcas_tarjeta
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.MARCAS_TARJETA(MARCA_TARJETA_NOMBRE)
			SELECT DISTINCT
				m.MARCA_TARJETA
			FROM 
				gd_esquema.Maestra m
			WHERE 
				m.MARCA_TARJETA IS NOT NULL
		END
GO

-- Tipo medio de pago
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_tipo_medio_de_pago')
DROP PROCEDURE migrar_tipo_medio_de_pago
GO
CREATE PROCEDURE migrar_tipo_medio_de_pago
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.TIPO_MEDIO_DE_PAGO(TMP_TIPO)
			SELECT DISTINCT
				m.MEDIO_PAGO_TIPO
			FROM 
				gd_esquema.Maestra m
			WHERE 
				m.MEDIO_PAGO_TIPO IS NOT NULL
		END
GO

--Medios de pago
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_medios_de_pago')
DROP PROCEDURE migrar_medios_de_pago
GO
CREATE PROCEDURE migrar_medios_de_pago
	AS
		BEGIN
		INSERT INTO BASE_DE_GATOS_2.MEDIOS_DE_PAGO(MP_NUMERO_TARJETA, MP_TIPO, MP_MARCA_TARJETA, MP_USUARIO)
			SELECT DISTINCT
				m.MEDIO_PAGO_NRO_TARJETA,
				tmp.TIPO_MEDIO_PAGO_ID,
				mar.MARCA_TARJETA_ID,
				u.USUARIO_ID
			FROM 
				gd_esquema.Maestra m
			JOIN BASE_DE_GATOS_2.TIPO_MEDIO_DE_PAGO tmp ON m.MEDIO_PAGO_TIPO = tmp.TMP_TIPO
			JOIN BASE_DE_GATOS_2.MARCAS_TARJETA mar ON m.MARCA_TARJETA = mar.MARCA_TARJETA_NOMBRE
			JOIN BASE_DE_GATOS_2.USUARIOS u ON m.USUARIO_DNI = u.USUARIO_DNI
			WHERE 
				m.MEDIO_PAGO_NRO_TARJETA IS NOT NULL
		END
GO

-- Executes
EXEC migrar_local_tipos
EXEC migrar_local_categorias

EXEC migrar_provincias
EXEC migrar_localidades
EXEC migrar_direcciones
EXEC migrar_locales
EXEC migrar_horario_dias
EXEC migrar_horarios
EXEC migrar_productos
EXEC migrar_local_producto

EXEC migrar_tipos_paquete
EXEC migrar_estados_envio_mensajeria
EXEC migrar_usuarios
EXEC migrar_direcciones_usuario

EXEC migrar_marcas_tarjeta
EXEC migrar_tipo_medio_de_pago
EXEC migrar_medios_de_pago

EXEC migrar_movilidades
EXEC migrar_repartidores

EXEC migrar_envio_pedidos
EXEC migrar_envio_mensajeria

EXEC migrar_estados_pedido
EXEC migrar_pedidos
EXEC migrar_local_producto_pedido

EXEC migrar_operadores
EXEC migrar_tipo_reclamo
EXEC migrar_estado_reclamo
EXEC migrar_solucion_reclamo
EXEC migrar_reclamos

EXEC migrar_cupones
EXEC migrar_pedido_cupon_tipo
EXEC migrar_reclamo_cupon
EXEC migrar_reclamo_cupon_tipo
EXEC migrar_pedido_cupon

COMMIT
